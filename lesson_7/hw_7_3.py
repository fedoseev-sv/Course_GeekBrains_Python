"""Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
В классе должны быть реализованы методы перегрузки арифметических операторов:
сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
умножение и обычное (не целочисленное) деление клеток, соответственно.

- В методе деления должно осуществляться округление значения до целого числа.
- Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
- Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек
двух клеток больше нуля, иначе выводить соответствующее сообщение.
- Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется
как произведение количества ячеек этих двух клеток.
- Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как
целочисленное деление количества ячеек этих двух клеток.

В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
Данный метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order()
вернет строку: *****\n*****\n**.
Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order()
вернет строку: *****\n*****\n*****.

Подсказка: подробный список операторов для перегрузки доступен по ссылке."""


class Cell():
    def __init__(self, quantity):
        self.quantity = int(quantity)

    def __str__(self):
        return f"Колличество клеток: {self.quantity}"

    # сложение
    def __add__(self, other):
        return Cell(self.quantity + other.quantity)

    # вычитание
    def __sub__(self, other):
        if (self.quantity - other.quantity) != 0:
            return Cell(self.quantity - other.quantity)
        else:
            return "Ошибка!"

    # умножение
    def __mul__(self, other):
        return Cell(self.quantity * other.quantity)

    # деление
    def __truediv__(self, other):
        return Cell(self.quantity / other.quantity)

    def make_order(self, row):
        line_row = ""
        for i in range(int(self.quantity / row)):
            line_row += f'{"*" * row}\n'
        line_row += f'{"*" * (self.quantity % row)}'
        return line_row


cell_1 = Cell(7)
cell_2 = Cell(3)
print("Сложение", cell_1 + cell_2)
print("Вычитание", cell_1 - cell_2)
print("Умножение", cell_1 * cell_2)
print("Деление", cell_1 / cell_2)
print("\nОрганизация по рядам:\n", cell_1.make_order(3))